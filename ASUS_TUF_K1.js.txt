export function Name() { return "Asus Keyboard"; }
export function VendorId() { return 0x0B05; }
export function ProductId() { return 0x1945; }
export function Publisher() { return "Delid4ve"; }
export function Documentation(){ return "troubleshooting/asus"; }
export function Size() { return [5, 1]; }
export function DefaultPosition(){return [0, 0];}
export function DefaultScale(){return 1.0;}
/* global
shutdownColor:readonly
LightingMode:readonly
forcedColor:readonly
*/
export function ControllableParameters() {
	return [
		{"property":"shutdownColor", "group":"lighting", "label":"Shutdown Color", "min":"0", "max":"360", "type":"color", "default":"#009bde"},
		{"property":"LightingMode", "group":"lighting", "label":"Lighting Mode", "type":"combobox", "values":["Canvas", "Forced"], "default":"Canvas"},
		{"property":"forcedColor", "group":"lighting", "label":"Forced Color", "min":"0", "max":"360", "type":"color", "default":"#009bde"},
	];
}

export function Initialize() {	 
}

var vLedNames = [ "Zone 1","Zone 2", "Zone 3","Zone 4","Zone 5" ]; 
var vLedPositions = [ [0,0],[1,0],[2,0],[3,0],[4,0]];

export function LedNames() {
	return vLedNames;
}

export function LedPositions() {
	return vLedPositions;
}

export function Render() {
	sendColors()
}

export function Shutdown() {

}

function hexToRgb(hex) {
	let result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	let colors = [];
	colors[0] = parseInt(result[1], 16);
	colors[1] = parseInt(result[2], 16);
	colors[2] = parseInt(result[3], 16);

	return colors;
}

export function Validate(endpoint) {
	return endpoint.interface === 0 && endpoint.usage === 0 && endpoint.usage_page === 0;
}

export function ImageUrl() {
	return "https://assets.signalrgb.com/devices/brands/asus/keyboards/strix-scope-standard.png";
}

export function Shutdown() {

}

function sendColors(shutdown = false) {

	let packet = [];
	let packetLength = 65;
	let startingPacket = 6;
	packet[0] = 0x00;
	packet[1] = 0xC0;
	packet[2] = 0x81;
	packet[3] = 0x00;
	packet[4] = 0x00;
	packet[5] = 0x00;
	
	for(let iIdx = 0; iIdx < vLedPositions.length; iIdx++) {
		let color;
		let iPxX = vLedPositions[iIdx][0];
		let iPxY = vLedPositions[iIdx][1];
	
		if(shutdown) {
			color = hexToRgb(shutdownColor);
		} else if (LightingMode === "Forced") {
			color = hexToRgb(forcedColor);
		} else {
			color = device.color(iPxX, iPxY);
		}
	
		let iLedIdx = (startingPacket + (iIdx * 4));
		packet[iLedIdx] = color[0];
		packet[iLedIdx+1] = color[1];
		packet[iLedIdx+2] = color[2];
	}
	device.write(packet, packetLength);
}

export function Validate(endpoint) {
	return endpoint.interface === 2 && endpoint.usage === 0x0001 && endpoint.usage_page === 0xFF00 && endpoint.collection === 0x0000;
	console.log("Validated")
}

